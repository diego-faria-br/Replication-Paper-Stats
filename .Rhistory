annotate("text", x = (2), y = (6), label = "M=0")+
annotate("text", x = (6), y = (2), label = "M=1")+
ggtitle("Qualified Majority")+
theme(plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line = element_line(arrow = arrow())
)
ggplot(dt,aes(x=xa,y=ya))+geom_smooth(method = "lm")+
geom_segment(aes(x = 5, y = 0, xend = 5, yend = 5),size=1)+
xlab("R")+
ylab("S")+
scale_x_continuous(limits = c(0,10), expand = c(0,0)) +
scale_y_continuous(limits = c(0,10), expand = c(0,0))+
annotate("text", x = (2), y = (6), label = "M=0")+
annotate("text", x = (6), y = (2), label = "M=1")+
ggtitle("Qualified Majority")+
theme(plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line = element_line(arrow = arrow())
)
ggplot(dt,aes(x=xa,y=ya))+geom_smooth(method = "lm")+
geom_segment(aes(x = 5, y = 0, xend = 5, yend = 5),size=1)+
xlab("R")+
ylab("S")+
scale_x_continuous(limits = c(0,10), expand = c(0,0)) +
scale_y_continuous(limits = c(0,10), expand = c(0,0))+
annotate("text", x = (2), y = (6), label = "M=0")+
annotate("text", x = (6), y = (2), label = "M=1")+
ggtitle("One Sided Rule")+
theme(plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line = element_line(arrow = arrow())
)
ggplot(dt,aes(x=xa,y=ya))+geom_smooth(method = "lm")+
geom_segment(aes(x = 1, y = 0, xend = 5, yend = 5),size=1)+
xlab("R")+
ylab("S")+
scale_x_continuous(limits = c(0,10), expand = c(0,0)) +
scale_y_continuous(limits = c(0,10), expand = c(0,0))+
annotate("text", x = (2), y = (6), label = "M=0")+
annotate("text", x = (6), y = (2), label = "M=1")+
ggtitle("General Linear With Default Bias")+
theme(plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line = element_line(arrow = arrow())
)
p2<-ggplot(dt,aes(x=xa,y=ya))+geom_smooth(method = "lm")+
geom_segment(aes(x = 5, y = 0, xend = 5, yend = 5),size=1)+
xlab("R")+
ylab("S")+
scale_x_continuous(limits = c(0,10), expand = c(0,0)) +
scale_y_continuous(limits = c(0,10), expand = c(0,0))+
annotate("text", x = (2), y = (6), label = "M=0")+
annotate("text", x = (6), y = (2), label = "M=1")+
ggtitle("One sided ")+
theme(plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line = element_line(arrow = arrow())
)
p3<-ggplot(dt,aes(x=xa,y=ya))+geom_smooth(method = "lm")+
geom_segment(aes(x = 0, y = 0, xend = 5, yend = 5),size=1)+
xlab("R")+
ylab("S")+
scale_x_continuous(limits = c(0,10), expand = c(0,0)) +
scale_y_continuous(limits = c(0,10), expand = c(0,0))+
annotate("text", x = (2), y = (6), label = "M=0")+
annotate("text", x = (6), y = (2), label = "M=1")+
ggtitle("Qualified Majority")+
theme(plot.title = element_text(hjust = 0.5),
panel.grid = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line = element_line(arrow = arrow())
)
p2
p3
install.packages("flexdashboard")
ls()
data<-read.csv("article_data.csv")
library(flexdashboard)
library(flexdashboard)
library(shiny)
library(tidyverse)
rm(list = ls())
data<-read.csv("article_data.csv")
data <- data %>%
mutate(data=as.Date(data))
data <- data %>%
mutate(data=as.Date(data))
data <- data %>%
mutate(data=as.Date(date()))
data <- data %>%
mutate(data=as.Date(date))
renderPlot({
pltData <- data %>%
filter(date >=input$dateRange[1] & date <=input$dateRange[2], publisher==input$outlet) %>%
select(-data,-publisher) %>%
summarize_all(funs(sum)) %>%
gather(candidate,count,Trump:Gabbard)
pubPlot <-ggplot(pltData,aes(x=candidate,y=count,fill=candidate))+geom_bar(stat="identity")
pubPlot
})
renderPlot({
pltData <- data %>%
filter(date >=input$dateRange[1] & date <=input$dateRange[2], publisher==input$outlet) %>%
select(-data,-publisher) %>%
summarize_all(funs(sum)) %>%
gather(candidate,count,Trump:Gabbard)
pubPlot <-ggplot(pltData,aes(x=candidate,y=count,fill=candidate))+geom_bar(stat="identity")
pubPlot
})
library(flexdashboard)
library(shiny)
library(tidyverse)
rm(list = ls())
data <- read.csv("article_data.csv")
data <- data %>%
mutate(date = as.Date(date))
selectInput("outlet",
label = "Select a news outlet:",
choices = sort(unique(data$publisher)),
selected = "AP")
dateRangeInput("dateRange",
"Date range:",
start = "2020-03-01",
end   = "2020-04-14")
library(flexdashboard)
library(shiny)
library(tidyverse)
rm(list = ls())
data<-read.csv("article_data.csv")
data <- data %>%
mutate(data=as.Date(date))
selectInput("outlet",
label="Select a News Outlet",
choices = sort(unique(data$publisher)),
selected ="AP")
dateRangeInput("dateRange",
label = "Date Range",
start = "2020-03-01",
end = "2020-04-14")
selectInput("outlet",
label="Select a News Outlet",
choices = sort(unique(data$publisher)),
selected ="AP")
library(tidyr)
library(dplyr)
library(ggplot2)
tindex <- read.csv("T index.csv")
knitr::opts_chunk$set(echo = TRUE)
# library(robustbase)
library(foreign)
library(tidyr)
library(car)
library(ggplot2)
# library(rdd)
library(dplyr)
library(stargazer)
# library(rdrobust)
# library(jtools)
# library(kableExtra)
# library(MASS)
library(sandwich)
library(lmtest)
library(gtable)
# library(estimatr)
rm(list = ls())
dat<-read.dta("./Data/main data.dta")
dat <- dat %>% rename(nextyear=femaleonballotnextyear,
margin=femalecand_margin_of_victory,
turnout=femaleturnout_nextcycle, electorate=female_percentageofelectorate_ne,cand10=femcands_over_contests_next_10r,cand75=femcands_over_contests_next_75m,win10=femwins_over_contests_next_10r,win75=femwins_over_contests_next_75m)
g3<-ggplot(dat_filtered, aes(x=margin,y=electorate))+
geom_smooth(method = "lm",formula = y~poly(x,4),data = dat_filtered[dat_filtered$margin <= 0,],
color = "#F8766D",
size = 1, se=TRUE) +
geom_smooth(method = "lm",formula = y~poly(x,4),data = dat_filtered[dat_filtered$margin >= 0,],
color = "#00BFC4",
size = 1, se=TRUE)+
geom_vline(xintercept = 0)+
stat_summary_bin(binwidth = 0.005, size=0.2)+
scale_x_continuous("Female Margin of Victory - Election 1", breaks = c(-.15,-.1,-.05,0,.05,.1,.15),limits=c(-.15,.15))+
ggtitle("Female Percentage of Electorate - Election 2")+
theme_minimal()
install.packages("httr")
library(httr)
library(jsonlite)
?as.Date
library(httr)
library(jsonlite)
rm(list=ls())
URL <- "http://compras.dados.gov.br/contratos/v1/contratos.csv?"
procur_2019 <- GET(URL, query = list(data_assinatura_min = "20190101",
data_assinatura_max = "20191221"))
View(procur_2019)
procur_data<-content(procur_2019)
View(procur_data)
library(dplyr)
names(procur_data)
procur_2019 <- GET(URL, query = list(data_assinatura_min = "20190101",
data_assinatura_max = "20191221",order_by="valor_inicial&order=desc"))
procur_data<-content(procur_2019)
head(procur_data)
procur_2019 <- GET(URL, query = list(data_assinatura_min = "20190101",
data_assinatura_max = "20191221"))
procur_data<-content(procur_2019)
better_names <- make.names(names(procur_data), unique=TRUE)
better_names
names(procur_data) <- make.names(names(procur_data), unique=TRUE)
str(procur_data)
procur_data$Valor.inicial <- as.numeric(gsub('[R$,]', '', procur_data$Valor.inicial))
str(procur_data)
procur_data<-content(procur_2019)
names(procur_data) <- make.names(names(procur_data), unique=TRUE)
str(procur_data$Valor.inicial)
procur_data$Valor.inicial <- as.numeric(gsub('[R$,]', '', procur_data$Valor.inicial))
str(procur_data$Valor.inicial)
procur_data$Valor.inicial[1]
names(procur_data)
str(procur_data$Data.de.Assinatura)
procur_data$Data.de.Assinatura <- as.Date(procur_data$Data.de.Assinatura,"%d/%m/%Y")
str(procur_data$Data.de.Assinatura)
matches <- regmatches(procur_data$CNPJ.Contratada, gregexpr("[[:digit:]]+", CNPJ))
matches <- regmatches(procur_data$CNPJ.Contratada, gregexpr("[[:digit:]]+", procur_data$CNPJ.Contratada))
as.character(unlist(matches))
procur_data <- procur_data %>% rename(cnpj=CNPJ.Contratada,valori=Valor.inicial) %>% select(cnpj,valori,Objeto) %>%
arrange(desc(valori))
head(procur_data)
View(procur_data)
View(procur_data)
URL2 <- "http://compras.dados.gov.br/licitacoes/v1/licitacoes.csv?"
lic_2019 <- GET(URL2, query = list(data_abertura_proposta_min = "20190101",
data_abertura_proposta_maz = "20191221"))
cdata<-content(procur_2019)
ldata<-content(lic_2019)
head(ldata)
lic_2019 <- GET(URL2, query = list(data_abertura_proposta_min = "20190101",
data_abertura_proposta_max = "20191231"))
ldata<-content(lic_2019)
URL2 <- "http://compras.dados.gov.br/licitacoes/v1/licitacoes.csv?"
lic_2019 <- GET(URL2, query = list(data_abertura_proposta_min = "20190101"))
ldata<-content(lic_2019)
lic_2019 <- GET(URL2, query = list(data_publicacao_min = "20190101",data_publicacao_max = "20191231"))
ldata<-content(lic_2019)
View(ldata)
names(ldata) <- make.names(names(ldata), unique=TRUE)
lic_2019 <- GET(URL2, query = list(data_publicacao_min = "20190101"))
ldata<-content(lic_2019)
lic_2019 <- GET(URL2, query = list(data_publicacao_min = "20190101"))
ldata<-content(lic_2019)
?content
URL2 <- "http://compras.dados.gov.br/licitacoes/v1/licitacoes.json?"
lic_2019 <- GET(URL2, query = list(data_publicacao_min = "20190101"))
ldata<-content(lic_2019)
head(ldata)
names(ldata) <- make.names(names(ldata), unique=TRUE)
names(ldata)
URL2 <- "http://compras.dados.gov.br/licitacoes/v1/licitacoes.xml?"
lic_2019 <- GET(URL2, query = list(data_publicacao_min = "20190101"))
ldata<-content(lic_2019)
URL2 <- "http://compras.dados.gov.br/licitacoes/v1/licitacoes.xml?"
lic_2019 <- GET(URL2, query = list(data_publicacao_min = "20190101"))
ldata<-content(lic_2019)
URL2 <- "http://compras.dados.gov.br/licitacoes/v1/licitacoes.csv?"
??httr
URL2 <- "http://compras.dados.gov.br/licitacoes/v1/licitacoes.csv?data_assinatura_min=20190101&data_assinatura_max=20191231"
for(i in 0:500:37500){
mydata <- fromJSON(paste0(URL2, "&offset=", i))
message("Retrieving page ", i)
pages[[i+1]] <- mydata$organizations
}
mydata <- fromJSON(paste0(URL2))
library(jsonlite)
mydata <- fromJSON(paste0(URL2))
mydata <- fromJSON(paste0(URL2))
?json
??json
URL2 <- "http://compras.dados.gov.br/licitacoes/v1/licitacoes.csv?data_assinatura_min=20190101&data_assinatura_max=20191231"
for(i in 0:500:37500){
k=k+1
lic_2019 <- GET(URL2, query = list(offset = as.character(i)))
message("Retrieving page ", i)
ldata[[k]]<-content(lic_2019)
}
k=0
for(i in 0:500:37500){
k=k+1
lic_2019 <- GET(URL2, query = list(offset = as.character(i)))
message("Retrieving page ", i)
ldata[[k]]<-content(lic_2019)
}
0:500:1000
1:5:10
for(i in 0:37500){
lic_2019 <- GET(URL2, query = list(offset = as.character(i)))
message("Retrieving page ", i)
ldata[[k]]<-content(lic_2019)
i=i+500
}
for?
?for
?for()
?for{}
for(i in c(0:500:37500)){
lic_2019 <- GET(URL2, query = list(offset = as.character(i)))
message("Retrieving page ", i)
ldata[[k]]<-content(lic_2019)
}
c(1:2:10)
i = seq(from = 0, to = 37500, by = 500)
int = seq(from = 0, to = 37500, by = 500)
inter = seq(from = 0, to = 37500, by = 500)
for(i in inter){
lic_2019 <- GET(URL2, query = list(offset = as.character(i)))
message("Retrieving page ", i)
ldata[[k]]<-content(lic_2019)
}
licita <- rbind(ldata)
names(licita)
View(licita)
View(licita)
View(ldata)
View(ldata)
View(ldata)
inter = seq(from = 0, to = 500, by = 500)
for(i in inter){
lic_2019 <- GET(URL2, query = list(offset = as.character(i)))
message("Retrieving page ", i)
ldata[[k]]<-content(lic_2019)
}
licita <- rbind(ldata)
str(licita)
lic_2019 <- GET(URL2, query = list(offset = "500"))
ldata<-content(lic_2019)
ldata
lic_2019 <- GET(URL2, query = list(offset = "0"))
ldata<-content(lic_2019)
lic_2019 <- GET(URL2)
ldata<-content(lic_2019)
names(ldata)
View(procur_data)
# library(robustbase)
library(foreign)
library(tidyr)
library(car)
library(ggplot2)
# library(rdd)
library(dplyr)
library(stargazer)
# library(rdrobust)
# library(jtools)
# library(kableExtra)
# library(MASS)
library(sandwich)
library(lmtest)
# library(estimatr)
rm(list = ls())
dat<-read.dta("./Data/main data.dta")
dat <- dat %>% rename(nextyear=femaleonballotnextyear,
margin=femalecand_margin_of_victory,
turnout=femaleturnout_nextcycle, electorate=female_percentageofelectorate_ne)
bw<-.15
dat_filtered <- dat %>% filter(margin<=bw & margin>=-bw)
# dat_filtered <- dat_filtered %>% select(nextyear,margin,womanwon,turnout,electorate,winXfem_v_c_p_4)%>% select(nextyear,womanwon,electorate) %>% na.omit()
datm <- dat_filtered %>% dplyr:: select(nextyear,margin,womanwon)
datt <- dat_filtered %>% dplyr:: select(margin,womanwon,turnout)
date <- dat_filtered %>% dplyr:: select(margin,womanwon,electorate)
# ================ Column 1 Table 1====================================================
reg1<-lm(nextyear~margin+I(margin^2)+
I(margin^3)+I(margin^4)+
margin*womanwon+I(margin^2)*womanwon+I(margin^3)*womanwon+
I(margin^4)*womanwon+womanwon,dat_filtered)
#robust https://stats.stackexchange.com/questions/117052/replicating-statas-robust-option-in-r
# c1 <- coeftest(regm,vcov=vcovHC(regm,"HC1"))
# stargazer(c1,type = "text")
#https://cran.r-project.org/web/packages/stargazer/vignettes/stargazer.pdf robust estimation of std. errors
cov1 <- vcovHC(reg1, type = "HC1")
robust.se1 <- sqrt(diag(cov1))
# regm<-lm(nextyear~womanwon+margin+fem_v_c_p_2+
#            fem_v_c_p_3+fem_v_c_p_4+
#            winXfem_v_c_p+winXfem_v_c_p_2+
#            winXfem_v_c_p_3+winXfem_v_c_p_4,
#          dat_filtered)
# ================ Column 2 Table 1====================================================
reg2<-lm(turnout~margin+I(margin^2)+
I(margin^3)+I(margin^4)+
margin*womanwon+I(margin^2)*womanwon+I(margin^3)*womanwon+
I(margin^4)*womanwon+womanwon,dat_filtered)
cov2 <- vcovHC(reg2, type = "HC1")
robust.se2 <- sqrt(diag(cov2))
# c2 <- coeftest(reg2,vcov=vcovHC(reg2,"HC1"))
# sjstats::robust(reg2)[6,]
# ================ Column 3 Table 1====================================================
reg3<-lm(electorate~margin+I(margin^2)+
I(margin^3)+I(margin^4)+
margin*womanwon+I(margin^2)*womanwon+I(margin^3)*womanwon+
I(margin^4)*womanwon+womanwon,dat_filtered)
cov3 <- vcovHC(reg3, type = "HC1")
robust.se3 <- sqrt(diag(cov3))
# c3 <- coeftest(reg3,vcov=vcovHC(reg3,"HC1"))
# ===========================Table 1====================================================
stargazer(reg1,reg2,reg3,type = "text",
keep.stat=c("n","rsq"),
se=list(robust.se1,robust.se2,robust.se3),
covariate.labels = c("Woman Won","Constant"),
# keep=c("womanwon","Constant"),
omit = c(":","I(margin2)","I(margin3)","I(margin4)","margin"),
column.labels=c("Woman on Ballot","Women's Voter Turnout","Female Share of Electorate"),
align=TRUE,dep.var.labels=c("","",""))
setwd("~/GitHub/Replication-Paper-Stats")
# library(robustbase)
library(foreign)
library(tidyr)
library(car)
library(ggplot2)
# library(rdd)
library(dplyr)
library(stargazer)
# library(rdrobust)
# library(jtools)
# library(kableExtra)
# library(MASS)
library(sandwich)
library(lmtest)
# library(estimatr)
rm(list = ls())
dat<-read.dta("./Data/main data.dta")
dat <- dat %>% rename(nextyear=femaleonballotnextyear,
margin=femalecand_margin_of_victory,
turnout=femaleturnout_nextcycle, electorate=female_percentageofelectorate_ne)
bw<-.15
dat_filtered <- dat %>% filter(margin<=bw & margin>=-bw)
# dat_filtered <- dat_filtered %>% select(nextyear,margin,womanwon,turnout,electorate,winXfem_v_c_p_4)%>% select(nextyear,womanwon,electorate) %>% na.omit()
datm <- dat_filtered %>% dplyr:: select(nextyear,margin,womanwon)
datt <- dat_filtered %>% dplyr:: select(margin,womanwon,turnout)
date <- dat_filtered %>% dplyr:: select(margin,womanwon,electorate)
# ================ Column 1 Table 1====================================================
reg1<-lm(nextyear~margin+I(margin^2)+
I(margin^3)+I(margin^4)+
margin*womanwon+I(margin^2)*womanwon+I(margin^3)*womanwon+
I(margin^4)*womanwon+womanwon,dat_filtered)
#robust https://stats.stackexchange.com/questions/117052/replicating-statas-robust-option-in-r
# c1 <- coeftest(regm,vcov=vcovHC(regm,"HC1"))
# stargazer(c1,type = "text")
#https://cran.r-project.org/web/packages/stargazer/vignettes/stargazer.pdf robust estimation of std. errors
cov1 <- vcovHC(reg1, type = "HC1")
robust.se1 <- sqrt(diag(cov1))
# regm<-lm(nextyear~womanwon+margin+fem_v_c_p_2+
#            fem_v_c_p_3+fem_v_c_p_4+
#            winXfem_v_c_p+winXfem_v_c_p_2+
#            winXfem_v_c_p_3+winXfem_v_c_p_4,
#          dat_filtered)
# ================ Column 2 Table 1====================================================
reg2<-lm(turnout~margin+I(margin^2)+
I(margin^3)+I(margin^4)+
margin*womanwon+I(margin^2)*womanwon+I(margin^3)*womanwon+
I(margin^4)*womanwon+womanwon,dat_filtered)
cov2 <- vcovHC(reg2, type = "HC1")
robust.se2 <- sqrt(diag(cov2))
# c2 <- coeftest(reg2,vcov=vcovHC(reg2,"HC1"))
# sjstats::robust(reg2)[6,]
# ================ Column 3 Table 1====================================================
reg3<-lm(electorate~margin+I(margin^2)+
I(margin^3)+I(margin^4)+
margin*womanwon+I(margin^2)*womanwon+I(margin^3)*womanwon+
I(margin^4)*womanwon+womanwon,dat_filtered)
cov3 <- vcovHC(reg3, type = "HC1")
robust.se3 <- sqrt(diag(cov3))
# c3 <- coeftest(reg3,vcov=vcovHC(reg3,"HC1"))
# ===========================Table 1====================================================
stargazer(reg1,reg2,reg3,type = "text",
keep.stat=c("n","rsq"),
se=list(robust.se1,robust.se2,robust.se3),
covariate.labels = c("Woman Won","Constant"),
# keep=c("womanwon","Constant"),
omit = c(":","I(margin2)","I(margin3)","I(margin4)","margin"),
column.labels=c("Woman on Ballot","Women's Voter Turnout","Female Share of Electorate"),
align=TRUE,dep.var.labels=c("","",""))
stargazer(reg1,reg2,reg3,type = "text",
keep.stat=c("n","rsq"),
# se=list(robust.se1,robust.se2,robust.se3),
ci=TRUE,
covariate.labels = c("Woman Won","Constant"),
# keep=c("womanwon","Constant"),
omit = c(":","I(margin2)","I(margin3)","I(margin4)","margin"),
column.labels=c("Woman on Ballot","Women's Voter Turnout","Female Share of Electorate"),
align=TRUE,dep.var.labels=c("","",""))
tt <-qt(c(0.025,0.975),summary(reg2)$df[2])
se <- sqrt(diag(cov2))
ci <-coef(reg2) + se %o% tt
ci
